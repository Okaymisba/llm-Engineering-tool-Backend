import os

import openai
from dotenv import load_dotenv

load_dotenv()

openai.api_key = os.getenv("OPENAI_API_KEY")


def query_openai_model(model, question, prompt_context=None, instructions=None, image_data=None, document_data=None):
    """
    Facilitates querying an OpenAI model by constructing the necessary
    message structure, optionally including system instructions, contextual
    information, and additional data such as an image or document. Sends the
    message to the specified OpenAI model and retrieves the response.

    :param model: Identifier for the OpenAI model to be used for generating
        the response.
    :type model: str
    :param question: User's query or the primary content sent to the model
        for generating a response.
    :type question: str
    :param prompt_context: Optional context or background information
        provided to the model to enhance the relevance of its response.
        Defaults to None.
    :type prompt_context: str, optional
    :param instructions: Optional specific instructions provided to customize
        the behavior and response of the model. Defaults to None.
    :type instructions: str, optional
    :param image_data: Optional data for an image that may inform the model's
        response. Defaults to None.
    :type image_data: str, optional
    :param document_data: Optional data for a document that may enhance the
        model's contextual understanding. Defaults to None.
    :type document_data: str, optional
    :return: The content portion of the response generated by the OpenAI
        model for the given query and context.
    :rtype: str
    """
    messages = []

    if instructions:
        messages.append({"role": "system", "content": instructions})

    if prompt_context:
        messages.append({"role": "system", "content": f"Here is the context: {prompt_context}"})

    if image_data:
        messages.append({"role": "system", "content": f"Here is the image: {image_data}"})

    if document_data:
        messages.append({"role": "system", "content": f"Here is the document: {document_data}"})

    messages.append({"role": "user", "content": question})

    response = openai.chat.completions.create(
        model=model,
        messages=messages
    )

    return response.choices[0].message.content, response.usage.total_tokens
